/*!
\file
\brief Заголовочный файл с описанием логики Змейки

Файл в котором хранятся все необходимые компоненты для работы с логикой игры
"Змейка"
*/
#ifndef S21_SNAKE_H
#define S21_SNAKE_H

#include <unistd.h>

#include <stdexcept>
#include <vector>

#include "../../../common/common.h"

#define SNAKE_MINIMUM_SPEED 300000
#define SNAKE_SPEED_STEP 20000
#define SCORE_PER_APPLE_SNEK 1
#define MAX_LEVEL_SKEL

/*!
  \brief Класс описывающий всю логику игры "Змейка"

  \param state Содержит в себе все параметры так или иначе относящиеся к
  состоянию игры.
*/
class Snake {
 public:
  /*!
  \brief Внутренний класс игры Змейка содержащий все необходимые параметры и
  удобный доступ к ним.

  \param status Текущий статус игры, здесь могут быть состояния описанные в
  Status_t \param field Содержит в себе указатель на двумерный массив содержащий
  данные о положении объектов на поле \param Direction Текущее направление
  движения змейки \param score Текущий счет \param level Текущий уровень \param
  pause Текущее состояние паузы. Принимает значения описанные в Banner
  (common.h). 3 значения вместо 2 существуют для разделения кнопки Pause и Start
  \param speedMod Модификатор скорости
  \param emptyMatrix Содержит указатель на пустую матрицу. Существует
  исключительно для передачи пустой матрицы в представление в поле NEXT (чего в
  змейке быть не может)
  */
  class State {
   private:
    int status;
    int **field;
    int direction;
    int score;
    int level;
    int pause;
    int speedMod;
    int **emptyMatrix;

   public:
    /*!
    \brief Стандартный конструктор класса.

    Задает стартовое состояние всех параметров класса, а также задает начальное
    положение змейки и яблока.
    */
    State();

    /*!
    \brief Стандартный деструктор класса.
    */
    ~State();

    /*!
    \brief Геттер указателя на пустую матрицу 4x4
    \return указатель на пустую матрицу 4х4.
    */
    int **getEmptyMatrix();

    /*!
    \brief Геттер указателя на массив поля игры
    \return указатель на двумерный массив содержащий данные о положении объектов
    на поле.
    */
    int **getArrayPtr();

    /*!
    \brief Устанавливает новый статус игры
    \param[in] newStatus новый статус
    */
    void setStatus(int newStatus);

    /*!
    \brief Геттер статуса игры
    \return Текущий статус игры
    */
    int getStatus();

    /*!
    \brief Устанавливает новое направление движения змейки
    \param[in] newDirection Направление движения из UserInput_t из common.h
    (Допустимые значения Up Down Left Right)
    */
    void setDirection(int newDirection);

    /*!
    \brief Геттер направления движения змейки
    \return Текущее направление движения змейки из UserInput_t из common.h
    (Допустимые значения Up Down Left Right)
    */
    int getDirection();

    /*!
    \brief Устанавливает новый счет
    \param[in] newScore Новый счет игрока
    */
    void setScore(int newScore);

    /*!
    \brief Геттер текущего счета игрока
    \return Текущий счет игрока
    */
    int getScore();

    /*!
    \brief Устанавливает новый рекорд игрока на основании текущего счета.

    Если текущий счет превышает рекорд то он становится рекордом.
    */
    void setHighScore();

    /*!
    \brief Геттер рекорда игрока.

    Считывает рекорд игрока из текстового файла.
    \return рекорд игрока
    */
    int getHighScore();

    /*!
    \brief Добавляет уровень если текущий счет это позволяет.
    */
    void addLevel();

    /*!
    \brief Геттер уровня сложности игры
    \return текущий уровень
    */
    int getLevel();

    /*!
    \brief Ставит игру на паузу
    */
    void pauseGame();

    /*!
    \brief Снимает игру с паузы
    */
    void unpauseGame();

    /*!
    \brief Геттер текущего состояния паузы.

    Получает текущий статус паузы, (из Banner из common.h)
    \return текущий статус состояния паузы.
    */
    int getPauseStatus();

    /*!
    \brief Проверяет на паузе ли игра.
    \return true - если игра на паузе. false - нет.
    */
    bool isPaused();

    /*!
    \brief Геттер модификатора скорости игры.
    \return модификатор скорости игры.
    */
    int getSpeedMod();

    /*!
    \brief Устанавливает модификатор скорости игры.
    \param[in] mod Новый модификатор скорости
    */
    void setSpeedMod(int mod);

    /*!
    \brief Устанавливает уровень на значение 0
    */
    void clearLevel();
  };
  typedef enum {
    GoUp,
    GoDown,
    GoLeft,
    GoRight,
    Moving,
    Start,
    GameOver
  } Status_t;

 private:
  /*!
  \brief Функция обрабатывающая столкновение змейки.

  Функция обрабатывает как победу так и поражение игрока. Выводит текст LOSE или
  WIN в зависимости от счета игрока и переводит игру в статус GameOver
  */
  void die();

  /*!
  \brief Спавнит яблоко в случайном месте если есть пустые клетки.
  */
  void spawnApple();

  /*!
  \brief Проверяет, есть ли яблоко перед головой змейки.

  Использует направление движения для определения объекта впереди.
  \return true - перед змейкой яблоко. false - нет
  */
  bool isInFrontApple();

  /*!
  \brief Проверяет, есть ли стена или другая часть змейки перед головой змейки.

  Использует направление движения для определения объекта впереди.
  \return true - перед змейкой стена или змейка. false - нет
  */
  bool isInFrontWall();

  /*!
  \brief Уничтожает самый последний пиксель змейки.
  */
  void killEnd();

  /*!
  \brief Увеличивает внутреннее значение всех пикселей змейки на 1

  Фактически нужно потому что голова змейки это 1, и после применения этой
  функции легко можно создать новую голову увеличив длину змейки
  */
  void addOneToSnake();

  /*!
  \brief Устанавливает пиксель головы змеи в направлении ее движения

  Использует направление движения для определения объекта впереди.
  */
  void placeHead();

  /*!
  \brief Получает объект перед змейкой.
  \return значение объекта в направлении движения. -1 - голова. -2 - стена.
  1-200 - змея. 0 - пустота.
  */
  int getObjectInDirection();

  /*!
  \brief Получает значение конца змейки.
  */
  int getEndNumber();

  /*!
  \brief Поворачивает змейку.

  Осуществляет контроль над правильностью поворота змеи в стороны.
  \param[in] newDirection новое направление движения змейки.
  */
  void turn(int newDirection);

  /*!
  \brief Двигает змейку вперед.

  Главная функция змейки. В ней содержится логика столкновений, съедания яблок и
  их спавна.
  */
  void moveForward();

 public:
  /*!
  \brief Стандартный конструктор класса.

  Задает все стартовые параметры игры.
  */
  Snake();
  State state;

  /*!
  \brief Двигает игру на 1 кадр вперед.

  \return состояние игры для представления.
  */
  GameInfo_t updateCurrentState();

  /*!
  \brief Обработчик ввода пользователя.

  \param[in] action ввод пользователя из UserAction_t из common.h
  \param[in] hold необязятельный параметр означающий то, что пользоваль зажал
  кнопку
  */
  void userInput(int action, bool hold = false);
};

#endif  // S21_SNAKE_H